{% extends "admin/base.jinja" %}
{% block content %}
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/gh/lipis/flag-icons@6.6.6/css/flag-icons.min.css"
/>
<h1 class="mt-5">{{ domain }}</h1>
<div class="section text-center mt-1">
    <div class="row">
        <div class="col-12">
            <strong>
                {% if status == 'active' %}
                ‚úÖ Active
                {% elif status == 'inactive' %}
                ‚ùå Inactive
                {% elif status == 'cdn-disabled' %}
                ‚ö†Ô∏è Active (CDN disabled)
                {% else %}
                ‚ö†Ô∏è Unknown status
                {% endif %}
            </strong>
        </div>
    </div>
</div>

<div class="section stats">
    <div class="row">
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value"><span class="traffic-month-value">‚åõ</span></div>
            <div class="stats-item-desc">Traffic in <span class="traffic-month-name"></span></div>
        </div>
        {% if health_check %}
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value"><span class="health-percent">‚åõ</span></div>
            <div class="stats-item-desc">Health in the past 24 hours</div>
        </div>
        {% endif %}
        
        {% if secondary_proxy %}       
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value"><span class="server-country-flag-name"></span><span class="fi server-country-flag mx-1" style="font-size: 16px;">‚åõ</span></div>
            <div class="stats-item-desc">Location</div>
        </div>
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value"><span class="server-tunnel-type">‚åõ</span></div>
            <div class="stats-item-desc">Tunnel type</div>
        </div>
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value"><span class="cpu-percent">‚åõ</span></div>
            <div class="stats-item-desc">Current CPU usage</div>
        </div>
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value"><span class="ram-percent">‚åõ</span></div>
            <div class="stats-item-desc">Current RAM usage</div>
        </div>
        {% else %}
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value">
                {% if status == 'cdn-disabled' %}
                    No CDN
                {% else %}
                    {{ cdn_provider }}
                {% endif %}
            </div>
            <div class="stats-item-desc">CDN provider</div>
        </div>
        {% endif %}
    </div>
</div>

{% if secondary_proxy %}

    <div class="row mt-5 fake-traffic px-2" style="display: none;">
        <div class="mb-2"><strong>üõ°Ô∏è Fake traffic protection is enabled</strong></div>
        <div class="mb-1">Due to the physical location of this server, Libertea will create fake asymmetric traffic to reduce the chance of detection.</div>
        <div style="opacity: 0.7">Libertea creates approximately <span class="fake-traffic-gb-per-day">‚åõ</span> GB of fake traffic every day.</div>
    </div>

    {% if secondary_proxy_update_available %}
    <div class="row mt-5">
        <div class="col-12">
            ‚ö†Ô∏è There's a new update available for this secondary proxy server.<br />
            <div style="font-size: 14px; margin-left: 26px; margin-top: 8px;">
                To update, run this command in the SSH shell of this server:<br />
                <code id="codeToCopy">curl -s {{ bootstrap_script_url }} -o /tmp/bootstrap.sh && bash /tmp/bootstrap.sh install-proxy update</code>
                <br />
                <br />
                <button class="btn btn-outline-primary btn-code-copy">
                    Copy code to clipboard
                </button>
            </div>
        </div>
    </div>
    <script>
        function copyCode() {
            var codeToCopy = document.querySelector("#codeToCopy").innerText;
            navigator.clipboard.writeText(codeToCopy);
    
            document.querySelector(".btn-code-copy").innerText = "Copied!";
            setTimeout(function() {
                document.querySelector(".btn-code-copy").innerText = "Copy code to clipboard";
            }, 2000);
        }
    
        document.querySelector("#codeToCopy").addEventListener("click", function() {
            copyCode();
    
            // select the whole code
            var range = document.createRange();
            range.selectNode(document.querySelector("#codeToCopy"));
            window.getSelection().removeAllRanges();
            window.getSelection().addRange(range);
        });
    
        document.querySelector(".btn-code-copy").addEventListener("click", function() {
            copyCode();
        });
    </script>
    
    
    {% endif %}
{% endif %}

{% if not secondary_proxy %}
    {% if status == 'cdn-disabled' %}
    <div class="row mt-5">
        <div class="col-12">
            ‚ö†Ô∏è If you want to route traffic through CDN, make sure you enable it (Orange cloud icon in CloudFlare)<br />
        </div>
    </div>
    {% endif %}
    {% if status == 'inactive' %}
    <div class="row mt-5">
        <div class="col-12">
            ‚ö†Ô∏è Make sure your domain is pointing to <strong>{{ server_ip }}</strong><br />
            And SSL/TLS encryption mode is set to <strong>Full</strong>.<br />
            <br />
            <img style="max-width: 500px; width: 100%; border: 1px solid #888; border-radius: 20px;" src="https://raw.githubusercontent.com/VZiChoushaDui/Libertea/master/docs/cloudflare-full-ssl.png" />
        </div>
    </div>
    {% endif %}
    {% if same_domain_as_panel_warning %}
    <div class="row mt-5">
        <div class="col-12">
            <div class="mb-2">
                ‚ö†Ô∏è This domain is the same as panel domains, which means if it's blocked, user's won't be able to fetch the
                updated list, unless you give them new links.
            </div>
            <div class="mb-2">
                We recommend using separate domains for panel and VPN connections.
            </div>
        </div>
    </div>
    {% endif %}
{% endif %}
    <div class="row mt-5">
        <h6>Traffic usage over time</h6>
        <canvas id="trafficChart" style="width: 100%; height: 250px;"></canvas>
    </div>
{% if health_check %}
    <div class="row mt-5">
        <h6>Health over time</h6>
        <canvas id="healthChart" style="width: 100%; height: 250px;"></canvas>
    </div>
{% endif %}

<form method="post" class="mt-5">
    <h6 class="mb-2 bordered">Advanced options</h6>
    <div class="form-group mb-4">
        <label for="priority">Priority</label>
        <select class="form-select" aria-label="Route priority" id="priority" name="priority">
            <option value="1" {% if tier == '1' %}selected{% endif %}>1 (Highest priority)</option>
            <option value="2" {% if tier == '2' %}selected{% endif %}>2</option>
            <option value="3" {% if tier == '3' %}selected{% endif %}>3</option>
            <option value="4" {% if tier == '4' %}selected{% endif %}>4 (Lowest priority)</option>
        </select>
        <small class="form-text text-muted">Users will try to connect to the higher priority routes first, and only connect to lower priority ones if those are not reachable.</small>
    </div>
    {% if not secondary_proxy %}
        <div class="form-group mb-4">
            <label for="ip_override">IP override</label>
            <input type="text" class="form-control" id="ip_override" name="ip_override" value="{% if ip_override != None %}{{ ip_override }}{% endif %}" placeholder="IP Address (for example 10.20.30.40)">
            <small class="form-text text-muted">Leave empty to use the domain IP itself; and if you want to use multiple IPs, separate them with a comma (,).</small>
        </div>
    {% endif %}
    
    <button type="submit" class="mt-4 btn btn-primary">Save</button>
    {% if not secondary_proxy %}
        <button class="mt-4 btn btn-outline-primary" type="button" data-bs-toggle="modal" data-bs-target="#deleteModal">
            Delete domain
        </button>
    {% endif %}
</form>


{% if not secondary_proxy %}
    <div class="row mt-5">
        <div class="col-12">
            <div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="deleteModalLabel">Delete domain</h5>
                            <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            Are you sure you want to delete this domain?
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-danger btn-delete-domain">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
{% endif %}

{% if secondary_proxy %}
        <script>
            var country = localStorage.getItem('ip-country-{{ domain }}');
            if (country) {
                var data = JSON.parse(country);
                document.querySelector('.server-country-flag').classList.add('fi-' + data.country.toLowerCase());
                document.querySelector('.server-country-flag').innerText = '';
                document.querySelector('.server-country-flag-name').innerText = data.country_name;
            } else {
                fetch('https://ipapi.co/{{ domain }}/json/')
                    .then(r => r.json())
                    .then(data => {
                        document.querySelector('.server-country-flag').classList.add('fi-' + data.country.toLowerCase());
                        document.querySelector('.server-country-flag').innerText = '';
                        document.querySelector('.server-country-flag-name').innerText = data.country_name;

                        localStorage.setItem('ip-country-' + elem.dataset.ip, JSON.stringify(data));
                    });
            }

            function updateServerMetadata() {
                fetch('/{{ admin_uuid }}/stats/system/{{ domain }}')
                    .then(r => r.json())
                    .then(data => {
                        document.querySelector('.cpu-percent').innerText = data.cpu;
                        document.querySelector('.ram-percent').innerText = data.ram;
                        document.querySelector('.server-tunnel-type').innerText = data.proxy_type.toUpperCase();
                        if (data.fake_traffic_enabled) {
                            document.querySelector('.fake-traffic').style.display = 'block';
                            document.querySelector('.fake-traffic-gb-per-day').innerText = data.fake_traffic_avg_gb_per_day;
                        }
                    });
            }

            setInterval(updateServerMetadata, 15000);
            updateServerMetadata();
        </script>
{% endif %}

{% if not secondary_proxy %}
        <script>
            document.querySelector('.btn-delete-domain').addEventListener('click', function() {
                fetch(window.location.href, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(function(response) {
                    if (response.ok) {
                        window.location.href = '/{{ admin_uuid }}/domains/';
                    } else {
                        alert('Failed to delete domain.');
                    }
                });
            });
        </script>
{% endif %}

{% if health_check %}
        <script>
            fetch('/{{ admin_uuid }}/health/{{ domain }}?hours=24')
                .then(r => r.json())
                .then(data => {
                    var elem = document.querySelector('.health-percent');

                    // group data by time_slice, and keep the max success_rate
                    var grouped_success_rate = {};
                    for (var i = 0; i < data.length; i++) {
                        var item = data[i];
                        if (item.success_rate == null) {
                            continue;
                        } 

                        if (grouped_success_rate[item.time_slice] == undefined) {
                            grouped_success_rate[item.time_slice] = 0;
                        }

                        grouped_success_rate[item.time_slice] = Math.max(grouped_success_rate[item.time_slice], item.success_rate);
                    }
                    
                    var success_rates = [];
                    for (var key in grouped_success_rate) {
                        success_rates.push({
                            time_slice: key,
                            success_rate: grouped_success_rate[key]
                        });
                    }

                    var sum = 0;
                    var count = 0;
                    for (var i = 0; i < success_rates.length; i++) {
                        var item = success_rates[i];
                        sum += item.success_rate;
                        count += 1;
                    }

                    if (count == 0) {
                        elem.innerText = 'N/A';
                        return;
                    }

                    var avg_percent = Math.round(sum / count * 100);
                    elem.innerText = avg_percent + '%';
                });
            fetch('/{{ admin_uuid }}/health/{{ domain }}?hours=168')
                .then(r => r.json())
                .then(data => {
                    var times = [];
                    for (var i = 0; i < data.length; i++) {
                        var item = data[i];
                        if (times.indexOf(item.time_slice) == -1) {
                            times.push(item.time_slice);
                        }
                    }

                    var chart_data_x = [];
                    var chart_data_y = [];

                    for (var i = 0; i < times.length; i++) {
                        var time = times[i];
                        var sum = 0;
                        var count = 0;
                        var max = 0;
                        for (var j = 0; j < data.length; j++) {
                            var item = data[j];
                            if (item.time_slice == time) {
                                sum += item.success_rate;
                                count += 1;
                                max = Math.max(max, item.success_rate);
                            }
                        }

                        var avg = sum / count;
                        chart_data_x.push(time.substring(0, time.length - 3));
                        // chart_data_y.push(Math.round(100 * avg));
                        chart_data_y.push(Math.round(100 * max));
                    }

                    const ctx = document.querySelector('#healthChart');
                    ctx.innerHTML = "";

                    new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: chart_data_x,
                            datasets: [{
                                label: 'Health (%)',
                                data: chart_data_y,
                                borderWidth: 1,
                                backgroundColor: 'rgba(229, 89, 119, 0.75)',
                                borderColor: 'rgba(229, 89, 119, 0.75)',
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    title: {
                                        display: true,
                                        text: "Health (%)",
                                    },
                                    beginAtZero: true,
                                }
                            },
                            plugins: {
                                legend: {
                                    display: false,
                                },
                                zoom: {
                                    zoom: {
                                        wheel: {
                                            enabled: true,
                                        },
                                        pinch: {
                                            enabled: true
                                        },
                                        mode: 'x',
                                    },
                                    pan: {
                                        enabled: true,
                                        mode: 'x',
                                    }
                                }
                            },
                        }
                    });
                });
        </script>
{% endif %}

        <script>    
            fetch('/{{ admin_uuid }}/stats/traffic/domain/{{ domain }}?days=30')
                .then(function(response) {
                    return response.json()
                })
                .then(function(data) {
                    const ctx = document.getElementById('trafficChart');
                    ctx.innerHTML = "";

                    new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: data.x,
                            datasets: [{
                                label: 'Traffic',
                                data: data.y,
                                borderWidth: 1,
                                fill: true,
                                backgroundColor: 'rgba(229, 89, 119, 0.2)',
                                borderColor: 'rgba(229, 89, 119, 1)',
                            }]
                        },
                        options: {
                            interaction: {
                                intersect: false,
                                mode: 'index',
                            },
                            scales: {
                                y: {
                                    title: {
                                        display: true,
                                        text: "Traffic (GB)",
                                    },
                                    beginAtZero: true,
                                }
                            },
                            plugins: {
                                legend: {
                                    display: false,
                                },
                                zoom: {
                                    zoom: {
                                        wheel: {
                                            enabled: true,
                                        },
                                        pinch: {
                                            enabled: true
                                        },
                                        mode: 'x',
                                    },
                                    pan: {
                                        enabled: true,
                                        mode: 'x',
                                    }
                                }
                            },
                        }
                    });
                });

            document.querySelector('.traffic-month-name').innerText = new Date().toLocaleString('default', { month: 'long' });
            fetch('/{{ admin_uuid }}/stats/traffic/domain/{{ domain }}?days=' + new Date().getDate())
                .then(function(response) {
                    return response.json()
                })
                .then(function(data) {
                    var sum = 0;
                    for (var i = 0; i < data.y.length; i++) {
                        sum += data.y[i];
                    }
                    document.querySelector('.traffic-month-value').innerText = Math.round(sum * 100) / 100 + ' GB';
                }); 
        </script>
    </div>
</div>

{% endblock %}
