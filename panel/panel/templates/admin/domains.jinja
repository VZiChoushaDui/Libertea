{% extends "admin/base.jinja" %}
{% block content %}
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/gh/lipis/flag-icons@6.6.6/css/flag-icons.min.css"
/>

<div class="mt-4 px-2">
    <a class="btn btn-primary float-start float-sm-end mx-1 mb-1" href="/{{ admin_uuid }}/domains/new/">
        Add new domain
    </a>
    <a class="btn btn-primary add-proxy-button float-start float-sm-end mx-1 mb-1" href="/{{ admin_uuid }}/proxies/new/">
        Add new secondary proxy
    </a>
</div>
<div style="clear: both"></div>

<div style="clear: both"></div>
<div class="mx-3">
    <h6 class="bordered">Domains</h6>
</div>
<div class="list-group list-group-flush mt-2">
    {% for domain in domains %}
        <a href="/{{ admin_uuid }}/domains/{{ domain.id }}/" class="list-group-item list-group-item-action">
            <div class="row">
                <div class="col-12 list-item-title">
                    {{ domain.id }}
                    {% if domain.tier != None %}<div class="list-item-badge">{{ domain.tier }}</div>{% endif %}
                    {% if domain.warning %} ‚ö†Ô∏è {% endif %}
                </div>
                <div class="col-6 list-item-subtitle">
                    {% if domain.status == 'active' %}
                    ‚úÖ Active
                    {% elif domain.status == 'inactive' %}
                    ‚ùå Inactive, click for details
                    {% elif domain.status == 'cdn-disabled' %}
                    ‚ö†Ô∏è Active (CDN disabled), click for details
                    {% else %}
                    ‚ö†Ô∏è Unknown status
                    {% endif %}
                </div>
                <div class="col-6 list-item-subtitle" style="text-align: right;">
                    {% if health_check %}
                    Health: <span class="health-percent" data-domainid="{{ domain.id }}">‚åõ</span>
                    {% endif %}
                </div>
            </div>
        </a>
    {% endfor %}
</div>
<div class="mx-3 mt-5">
    <h6 class="bordered">Secondary Proxies</h6>
</div>

<div class="proxy-intro mt-2 mx-3">
    <div class="mb-2" style="font-size: 14px;">
        Secondary proxies allow users to connect to your Libertea via direct IP routes, bypassing the CDN for 
        more reliable connections for when the ISPs are blocking the CDN.
    </div>
</div>

<div class="list-group list-group-flush mt-2">
    {% for proxy in proxies %}
        <a href="/{{ admin_uuid }}/domains/{{ proxy.ip }}/" class="list-group-item list-group-item-action">
            <div class="row">
                <div class="col-12 list-item-title">
                    <span class="secondary-proxy-flag fi" data-ip="{{ proxy.ip }}"></span>
                    {{ proxy.ip }}
                    {% if proxy.tier != None %}<div class="list-item-badge">{{ proxy.tier }}</div>{% endif %}
                    {% if proxy.update_available %}‚ö†Ô∏è{% endif %}
                </div>
                <div class="col-6 list-item-subtitle">
                    {% if proxy.update_available %}
                    üü¢ Online, update available
                    {% else %}
                    üü¢ Online
                    {% endif %}
                </div>
                <div class="col-6 list-item-subtitle" style="text-align: right;">
                    {% if health_check %}
                    Health: <span class="health-percent" data-domainid="{{ proxy.ip }}">‚åõ</span>
                    {% endif %}
                </div>
            </div>
        </a>
    {% endfor %}
</div>

<div class="proxy-intro mt-4 mx-3">    
    <div class="mb-2" style="opacity: 0.75; font-size: 12px;">
        The IPs for secondary proxies might get blocked after a while, in which case you can simply delete
        the old secondary proxy server and add a new one, without disrupting your service and main server.
    </div>
</div>

{% if health_check %}
<script>
    document.querySelectorAll('.health-percent').forEach(elem => {
        fetch('/{{admin_uuid}}/health/' + elem.dataset.domainid + '?hours=24')
            .then(r => r.json())
            .then(data => {
                // group data by time_slice, and keep the max success_rate
                var grouped_success_rate = {};
                for (var i = 0; i < data.length; i++) {
                    var item = data[i];
                    if (item.success_rate == null) {
                        continue;
                    } 

                    if (grouped_success_rate[item.time_slice] == undefined) {
                        grouped_success_rate[item.time_slice] = 0;
                    }

                    grouped_success_rate[item.time_slice] = Math.max(grouped_success_rate[item.time_slice], item.success_rate);
                }
                
                var success_rates = [];
                for (var key in grouped_success_rate) {
                    success_rates.push({
                        time_slice: key,
                        success_rate: grouped_success_rate[key]
                    });
                }

                var sum = 0;
                var count = 0;
                for (var i = 0; i < success_rates.length; i++) {
                    var item = success_rates[i];
                    sum += item.success_rate;
                    count += 1;
                }

                if (count == 0) {
                    elem.innerText = 'N/A';
                    return;
                }

                var avg_percent = Math.round(sum / count * 100);
                elem.innerText = avg_percent + '%';
            });
    });
</script>
{% endif %}

<script>
    document.querySelectorAll('.secondary-proxy-flag').forEach(elem => {
        var country = localStorage.getItem('ip-country-' + elem.dataset.ip);
        if (country) {
            country = JSON.parse(country);
            elem.classList.add('fi-' + country.country_code.toLowerCase());
            return;
        }

        fetch('https://ipapi.co/' + elem.dataset.ip + '/json/')
            .then(r => r.json())
            .then(data => {
                elem.classList.add('fi-' + data.country_code.toLowerCase());
                localStorage.setItem('ip-country-' + elem.dataset.ip, JSON.stringify(data));
            });
    });
</script>

{% endblock %}
