{% extends "admin/base.jinja" %}
{% block content %}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<div class="qr-modal">
    <div class="qr-modal-content">
        <div id="qr-code"></div>
        <button class="btn btn-light qr-modal-close" style="margin-top: 24px; width: 150px;">Back</button>
    </div>
</div>
<h1 class="mt-4 mb-5">User "{{ user.note }}"</h1>
{% if no_domain_warning %}
<div class="w-100 mt-4 px-3">
    <i class="fa-solid fa-circle-exclamation warning-icon"></i> Warning: You don't have any domains or secondary proxies set for your VPN. User's won't be able to connect to your VPN until you add a domain.
</div>
{% endif %}
<div class="section">
    <div class="form-group mb-4">
        <label for="panelUrl">User link</label>
        <div class="input-group">
            <input type="text" class="form-control" id="panelUrl" readonly value="{{ user.panel_url }}">
            <button class="btn btn-outline-secondary btn-qr-code" type="button">
                <i class="fa-solid fa-qrcode"></i>
            </button>
            <button class="btn btn-outline-secondary btn-email" type="button">
                <i class="fa-solid fa-envelope"></i>
            </button>
            <button class="btn btn-outline-secondary btn-copy" type="button">
                <i class="fa-solid fa-copy"></i>
            </button>
            <a class="btn btn-primary btn-open-url" type="button" href="{{ user.panel_url }}" target="_blank">
                <i class="fa-solid fa-arrow-up-right-from-square" style="margin-top: 4px"></i>
            </a>
        </div>
        <div class="form-text">Share the link above with user. Installation instructions are available for them in this link.</div>
    </div>
</div>
<hr />
{% if user_expired %}
<div class="alert alert-danger mt-4 mx-3" role="alert">
    <i class="fa-solid fa-circle-exclamation"></i> This user is expired. It was active until {{ user.user_active_until }}.
</div>
{% endif %} 
{% if user.monthly_traffic > 0 and traffic_this_month > user.monthly_traffic %}
<div class="alert alert-danger mt-4 mx-3" role="alert">
    <i class="fa-solid fa-circle-exclamation"></i> This user has exceeded their monthly traffic limit.
</div>
{% endif %}
<div class="section stats mb-5">
    <div class="row">
        <div class="col-6 col-sm-3 stats-item">
            <div class="stats-item-value">{{ traffic_today }} GB</div>
            <div class="stats-item-desc">Traffic today</div>
        </div>
        <div class="col-6 col-sm-3 stats-item">
            <div class="stats-item-value">{{ traffic_this_month }} GB</div>
            <div class="stats-item-desc">Traffic in {{ month_name }}</div>
        </div>
        <div class="col-6 col-sm-3 stats-item">
            <div class="stats-item-value">{{ traffic_past_30_days }} GB</div>
            <div class="stats-item-desc">Traffic in past 30 days</div>
        </div>
        <div class="col-6 col-sm-3 stats-item">
            <div class="stats-item-value ips-connected-right-now spinner text-spinner">⌛</div>
            <div class="stats-item-desc">IPs connected right now</div>
        </div>
        <div class="col-6 col-sm-3 stats-item d-none">
            <div class="stats-item-value max-concurrent-connections spinner text-spinner">⌛</div>
            <div class="stats-item-desc">Max concurrent connections today</div>
        </div>
    </div>
</div>
<div class="section mb-4">
    <h6>Traffic usage over time</h6>
    <div class="spinner">
        <canvas id="trafficChart" class="animated" style="width: 100%; height: 250px;"></canvas>
    </div>
</div>
<div class="section mb-4">
    <h6>Connected IPs over time</h6>
    <div class="spinner">
        <canvas id="connectionChart" class="animated" style="width: 100%; height: 250px;"></canvas>
    </div>
</div>
<div class="section">
    <form method="post" class="mt-2">
        <h6 class="mb-2 bordered">User settings</h6>
        <div class="form-group mb-4">
            <label for="userId">User Id</label>
            <input type="text" class="form-control" id="userId" name="userId" readonly disabled value="{{ user._id }}">
        </div>
        <div class="form-group mb-4">
            <label for="displayName">Display name</label>
            <input type="text" class="form-control" id="displayName" name="note" value="{{ user.note }}">
        </div>
        <div class="form-group mb-4">
            <label for="monthly_traffic">Monthly traffic (GB)</label>
            <div class="input-group">  
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="checkbox" value="on" id="monthly_traffic_unlimited" name="monthly_traffic_unlimited" {% if user.monthly_traffic == -1 %}checked{% endif %}>
                    <label class="form-check-label mx-2" for="monthly_traffic_unlimited">
                        Unlimited
                    </label>
                </div>
                <input type="number" class="form-control" id="monthly_traffic" name="monthly_traffic" value="{% if user.monthly_traffic == -1 %}50{% else %}{{ user.monthly_traffic }}{% endif %}">
            </div>
            <div style="opacity: 0.75; font-size: 12px; float:left;" class="mb-3">
                Monthly traffic limit resets on the first day of each month.
            </div>
            <div style="opacity: 0.9; font-size: 14px; float: right;" class="mb-3 monthly-traffic-hint">
                Current usage: {{ traffic_this_month }} GB
            </div>
        </div>
        <div style="clear: both;"></div>
        <div class="form-group mb-4">
            <label for="user_active_until">User active until</label>
            <div class="input-group">  
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="checkbox" value="on" id="user_active_until_unlimited" name="user_active_until_unlimited" {% if user.user_active_until == '' %}checked{% endif %}>
                    <label class="form-check-label mx-2" for="user_active_until_unlimited">
                        Forever
                    </label>
                </div>
                <input type="number" class="form-control" id="user_active_until" name="user_active_until" value="">
            </div>
            <div style="opacity: 0.9; font-size: 14px; text-align: right; float: right" class="mb-3 user-active-hint">
            </div>
        </div>
        <div style="clear: both;"></div>
        <div class="form-group mb-4">
            <label for="max_ips">Max concurrent IPs to connect</label>
            <div class="input-group mb-3">  
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="checkbox" value="on" id="max_ips_default" name="max_ips_default" {% if max_ips_default %}checked{% endif %}>
                    <label class="form-check-label mx-2" for="max_ips_default">
                        Default
                    </label>
                </div>
                <input type="number" class="form-control" id="max_ips" name="max_ips" value="{{ user.max_ips }}">
            </div>
        </div>
        <div class="form-group mt-5">
            <label class="form-check-label">
                Default available servers<br />
                <span style="opacity: 0.75; font-size: 12px;">
                    Select which priority groups should be visible to each user. This affects Clash, V2Ray and Shadowsocks connections.
                </span>
            </label>
        </div>
        <div class="mb-5 mx-2 route-direct-countries-list" style="border-left: 2px solid #aaa; padding-left: 8px;">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="on" name="tier_enabled_for_subscription_default" id="tier_enabled_for_subscription_default" {% if user.tier_enabled_for_subscription['default'] %}checked{% endif %}>
                <label class="form-check-label" for="tier_enabled_for_subscription_default">
                    Default configuration
                </label>
            </div>
            {% for tier in ['1','2','3','4'] %}
                <div class="form-check tier-enabled-for-subscription-custom">
                    <input class="form-check-input" type="checkbox" value="on" name="tier_enabled_for_subscription_{{ tier }}" id="tier_enabled_for_subscription_{{ tier }}" {% if user.tier_enabled_for_subscription[tier] %}checked{% endif %}>
                    <label class="form-check-label" for="tier_enabled_for_subscription_{{ tier }}">
                        Group {{ tier }}
                    </label>
                </div>
            {% endfor %}
        </div>
        

        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-outline-primary" type="button" data-bs-toggle="modal" data-bs-target="#deleteModal">
            Delete
        </button>

        <div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteModalLabel">Delete user</h5>
                        <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this user?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-danger btn-delete-user">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </form>
    <script>
        document.querySelector('.btn-delete-user').addEventListener('click', function() {
            fetch(window.location.href, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(function(response) {
                if (response.ok) {
                    window.location.href = '/{{ admin_uuid }}/users/';
                } else {
                    alert('Failed to delete user');
                }
            });
        });

        var panel_url = "{{ user.panel_url }}";
        document.querySelector('.btn-copy').addEventListener('click', function() {
            navigator.clipboard.writeText(panel_url);
            document.querySelector('.btn-copy i').classList.remove('fa-copy');
            document.querySelector('.btn-copy i').classList.add('fa-check');
            document.querySelector('.btn-copy').classList.remove('btn-outline-secondary');
            document.querySelector('.btn-copy').classList.add('btn-secondary');
            setTimeout(function() {
                document.querySelector('.btn-copy i').classList.remove('fa-check');
                document.querySelector('.btn-copy i').classList.add('fa-copy');
                document.querySelector('.btn-copy').classList.remove('btn-secondary');
                document.querySelector('.btn-copy').classList.add('btn-outline-secondary');
            }, 1500);
        });

        document.querySelector('.btn-email').addEventListener('click', function() {
            window.location.href = 'mailto:?subject=Clash%20Panel%20URL&body=' + encodeURIComponent(panel_url);
        });

        document.querySelector('.btn-qr-code').addEventListener('click', function() {
            var size = 400;
            size = Math.min(size, window.innerWidth - 120);

            new QRCode(document.getElementById("qr-code"), {
                text: panel_url,
                width: size,
                height: size,
            });

            document.querySelector('.qr-modal').style.display = 'block';
            requestAnimationFrame(function () {
                document.querySelector('.qr-modal').style.opacity = 1;
            });                
        });

        document.querySelector('.qr-modal-close').addEventListener('click', function (event) {
            document.querySelector('.qr-modal').style.opacity = 0;
            setTimeout(function () {
                document.querySelector('.qr-modal').style.display = 'none';
                document.getElementById("qr-code").innerHTML = '';
            }, 300);
        });       

        // on clicking panelUrl, select all and copy to clipboard
        document.getElementById('panelUrl').addEventListener('click', function() {
            this.select();
            document.querySelector('.btn-copy').dispatchEvent(new Event('click'));
        });

        document.getElementById('max_ips_default').addEventListener('change', function() {
            document.getElementById('max_ips').disabled = this.checked;
            if (this.checked) {
                document.getElementById('max_ips').value = '{{ default_max_ips_count }}';
            }
        });
        document.getElementById('max_ips_default').dispatchEvent(new Event('change'));

        document.getElementById('monthly_traffic_unlimited').addEventListener('change', function() {
            document.getElementById('monthly_traffic').disabled = this.checked;
            if (this.checked) {
                document.getElementById('monthly_traffic').value = '';
            } else {
                document.getElementById('monthly_traffic').value = '{% if user.monthly_traffic == -1 %}50{%else%}{{ user.monthly_traffic }}{%endif%}';
            }
        });
        document.getElementById('monthly_traffic_unlimited').dispatchEvent(new Event('change'));

        function getUserActiveDefaultDate() {
            {% if user.user_active_until == '' %}
            var expireDate = new Date();
            expireDate.setFullYear(expireDate.getFullYear() + 1);
            return expireDate.getFullYear() + '-' + (expireDate.getMonth() + 1).toString().padStart(2, '0') + '-' + expireDate.getDate().toString().padStart(2, '0') + ' ' + expireDate.getHours().toString().padStart(2, '0') + ':' + expireDate.getMinutes().toString().padStart(2, '0');
            {% else %}
            return '{{ user.user_active_until }}';
            {% endif %}
        }

        function updateUserActiveUntilHint() {
            if (document.getElementById('user_active_until_unlimited').checked) {
                document.querySelector('.user-active-hint').innerHTML = '';
                document.querySelector('.user-active-hint').style.color = 'green';
                return;
            }
        
            var expireDateString = document.getElementById('user_active_until').value; // yyyy-mm-dd hh:mm
            var expireDate = new Date(expireDateString);
            var today = new Date();
            var diff = expireDate - today;
            var days = Math.round(diff / (1000 * 60 * 60 * 24));
            if (days < 0) {
                document.querySelector('.user-active-hint').innerHTML = 'Expired';
                document.querySelector('.user-active-hint').style.color = 'red';
            } else if (days == 0) {
                document.querySelector('.user-active-hint').innerHTML = 'Expires today';
                document.querySelector('.user-active-hint').style.color = 'orange';
            } else {
                document.querySelector('.user-active-hint').innerHTML = 'Expires in ' + days + ' days';
                document.querySelector('.user-active-hint').style.color = 'green';
            }
        }
        setTimeout(updateUserActiveUntilHint, 200);

        document.getElementById('user_active_until_unlimited').addEventListener('change', function() {
            document.getElementById('user_active_until').disabled = this.checked;
            if (this.checked) {
                setTimeout(function() {
                    document.getElementById('user_active_until').value = '';
                }, 100);
            } else {
                document.getElementById('user_active_until').value = getUserActiveDefaultDate();
                updateUserActiveUntilHint();
            }
        });
        document.getElementById('user_active_until_unlimited').dispatchEvent(new Event('change'));


        document.getElementById('user_active_until').addEventListener('change', function() {
            updateUserActiveUntilHint();
        });


        function get_ips_connected_right_now() {
            fetch('/{{ user.connect_url }}/connected-ips-count-long')
                .then(function(response) {
                    return response.text()
                })
                .then(function(data) {
                    if (Number.isInteger(parseInt(data))) {
                        document.querySelector('.ips-connected-right-now').innerHTML = data;
                    } else {
                        document.querySelector('.ips-connected-right-now').innerHTML = '-';
                    }
                    document.querySelector('.ips-connected-right-now').classList.remove('spinner');
                });
        }

        function updateConnectionChart() {
            fetch('/{{ admin_uuid }}/stats/connections/{{ user._id }}?days=30')
                .then(function(response) {
                    return response.json()
                })
                .then(function(data) {
                    try {
                        var lastDayKey = data.x.slice(-1)[0].substring(0, 5);
                        var maxValToday = 0;
                        for (var i = 0; i < data.y.length; i++) {
                            if (data.x[i].substring(0, 5) == lastDayKey) {
                                maxValToday = Math.max(maxValToday, data.y[i]);
                            }
                        }
                        document.querySelector('.max-concurrent-connections').innerHTML = maxValToday;
                    }
                    catch {
                        document.querySelector('.max-concurrent-connections').innerHTML = '-';
                    }
                    document.querySelector('.max-concurrent-connections').classList.remove('spinner');



                    const ctx = document.getElementById('connectionChart');
                    ctx.innerHTML = "";

                    new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: data.x,
                            datasets: [{
                                label: 'IPs connected',
                                data: data.y,
                                borderWidth: 1,
                                fill: true,
                                backgroundColor: 'rgba(229, 89, 119, 0.2)',
                                borderColor: 'rgba(229, 89, 119, 1)',
                                pointRadius: 0,
                            }]
                        },
                        options: {
                            animation: {
                                duration: 0,
                            },
                            interaction: {
                                intersect: false,
                                mode: 'index',
                            },
                            scales: {
                                y: {
                                    title: {
                                        display: true,
                                        text: "Connected IPs",
                                    },
                                    beginAtZero: true,
                                }
                            },
                            plugins: {
                                legend: {
                                    display: false,
                                },
                                zoom: {
                                    zoom: {
                                        wheel: {
                                            enabled: true,
                                        },
                                        pinch: {
                                            enabled: true
                                        },
                                        mode: 'x',
                                    },
                                    pan: {
                                        enabled: true,
                                        mode: 'x',
                                    }
                                }
                            },
                        }
                    });

                    
                    // Zoom to last 7 days
                    const chart = Chart.getChart(ctx);
                    chart.resetZoom();
                    if (window.innerWidth < 768) {
                        chart.options.scales.x.min = data.x[data.x.length - 3 * 24 * (60 / 10)];
                    } else {
                        chart.options.scales.x.min = data.x[data.x.length - 7 * 24 * (60 / 10)];
                    }
                    chart.options.scales.x.max = data.x[data.x.length - 1];
                    chart.update();

                    ctx.classList.add('loaded');
                    ctx.parentElement.classList.remove('spinner');
                });
        }

            
        function updateTrafficChart() {
            fetch('/{{ admin_uuid }}/stats/traffic/user/{{ user._id }}?days=90')
                .then(function(response) {
                    return response.json()
                })
                .then(function(data) {
                    const ctx = document.getElementById('trafficChart');
                    ctx.innerHTML = "";

                    new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: data.x,
                            datasets: [{
                                label: 'Traffic',
                                data: data.y,
                                borderWidth: 1,
                                fill: true,
                                backgroundColor: 'rgba(229, 89, 119, 0.2)',
                                borderColor: 'rgba(229, 89, 119, 1)',
                            }]
                        },
                        options: {
                            animation: {
                                duration: 0,
                            },
                            interaction: {
                                intersect: false,
                                mode: 'index',
                            },
                            scales: {
                                y: {
                                    title: {
                                        display: true,
                                        text: "Traffic (GB)",
                                    },
                                    beginAtZero: true,
                                }
                            },
                            plugins: {
                                legend: {
                                    display: false,
                                },
                                zoom: {
                                    zoom: {
                                        wheel: {
                                            enabled: true,
                                        },
                                        pinch: {
                                            enabled: true
                                        },
                                        mode: 'x',
                                    },
                                    pan: {
                                        enabled: true,
                                        mode: 'x',
                                    }
                                }
                            },
                        }
                    });

                    // Zoom to last 30 days
                    const chart = Chart.getChart(ctx);
                    chart.resetZoom();
                    if (window.innerWidth < 768) {
                        chart.options.scales.x.min = data.x[data.x.length - 14];
                    } else {
                        chart.options.scales.x.min = data.x[data.x.length - 30];
                    }
                    chart.options.scales.x.max = data.x[data.x.length - 1];
                    chart.update();

                    ctx.classList.add('loaded');
                    ctx.parentElement.classList.remove('spinner');
                });
        }

        function setCustomTierEnabledForSubscriptionVisiblity() {
            if (document.getElementById('tier_enabled_for_subscription_default').checked) {
                document.querySelectorAll('.tier-enabled-for-subscription-custom').forEach(function (el) {
                    el.style.display = 'none';
                });
            } else {
                document.querySelectorAll('.tier-enabled-for-subscription-custom').forEach(function (el) {
                    el.style.display = 'block';
                });
            }
        }

        setInterval(get_ips_connected_right_now, 5000);
        get_ips_connected_right_now();
        updateConnectionChart();
        updateTrafficChart();
        setCustomTierEnabledForSubscriptionVisiblity();

        document.getElementById('tier_enabled_for_subscription_default').addEventListener('change', setCustomTierEnabledForSubscriptionVisiblity);

        flatpickr('#user_active_until', {
            enableTime: true,
            dateFormat: "Y-m-d H:i",
            time_24hr: true,
            position: 'above',
            defaultDate: getUserActiveDefaultDate(),
            onChange: function(selectedDates, dateStr, instance) {
                setTimeout(updateUserActiveUntilHint, 100);
            },
            onOpen: function(selectedDates, dateStr, instance) {
                instance.setDate(document.getElementById('user_active_until').value);
                console.log('open');
                console.log(instance);

                setTimeout(function() {
                    // create a div as the first element in the calendar container
                    var extra = document.createElement('div');
                    extra.classList.add('flatpickr-calendar-extra');

                    // create 1 month, 2 months, 3 months, 6 months, 1 year buttons
                    var today = new Date();
                    var months = [1, 2, 3, 6, 12, 24, 'Forever'];
                    months.forEach(function (month) {
                        var button = document.createElement('button');
                        button.classList.add('btn', 'btn-light');
                        button.style.flexGrow = 1;
                        if (month == 'Forever')
                            button.innerHTML = 'Forever';
                        else if (month % 12 == 0)
                            button.innerHTML = month / 12 + ' year' + (month / 12 > 1 ? 's' : '');
                        else
                            button.innerHTML = month + ' month' + (month > 1 ? 's' : '');
                        button.addEventListener('click', function() {
                            if (month == 'Forever') {
                                document.getElementById('user_active_until_unlimited').checked = true;
                                document.getElementById('user_active_until_unlimited').dispatchEvent(new Event('change'));
                                instance.close();
                            } else {
                                var newDate = new Date(today);
                                newDate.setMonth(newDate.getMonth() + month);
                                instance.setDate(newDate);
                            }
                            updateUserActiveUntilHint();
                        });
                        extra.appendChild(button);
                    });

                    instance.calendarContainer.insertBefore(extra, instance.calendarContainer.firstChild);
                }, 100);
            },
            onClose: function(selectedDates, dateStr, instance) {
                console.log('close');
                instance.calendarContainer.removeChild(instance.calendarContainer.querySelector('.flatpickr-calendar-extra'));
            }
        });
    </script>
    <style>
    .flatpickr-calendar-extra {
        height: 100%;
        width: 150px;
        background: white;
        position: absolute;
        right: -154px;
        box-shadow: 1px 0 0 #e6e6e6, -1px 0 0 #e6e6e6, 0 1px 0 #e6e6e6, 0 -1px 0 #e6e6e6, 0 3px 13px rgba(0,0,0,0.08);
        border-radius: 4px;
        animation: fadeIn 0.2s ease-in-out forwards;
        display: flex;
        flex-direction: column;
        align-items: stretch;
        justify-content: space-around;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateX(10px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    </style>
</div>

{% endblock %}
