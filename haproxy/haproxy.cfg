global
    daemon
    nbthread 1
    maxconn 100000
    log 127.0.0.1:514 local0
    lua-load /haproxy-files/script.lua
    # stats socket /home/haproxy_stats/stats

defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  http-server-close
    timeout http-request    300s
    timeout queue           5s
    timeout connect         10s
    timeout client          300s
    timeout server          300s
    timeout http-keep-alive 60s
    timeout check           10s

    log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r %U"

userlist adminuser
    user admin insecure-password "${PANEL_ADMIN_PASSWORD}"

# Accept both HTTP and HTTPS requests on port 80
# frontend port80
#     bind *:80

#     mode tcp
#     option tcplog

#     tcp-request inspect-delay 50ms
#     tcp-request content accept if HTTP
#     tcp-request content accept if { req.ssl_hello_type 1 }

#     use_backend forward_http if HTTP
#     default_backend forward_https

# backend forward_http
#     mode tcp
#     # option forwardfor
#     server serverhttp 127.0.0.1:81

# backend forward_https
#     mode tcp
#     # TODO: forwardfor is not working here, as it's tcp mode. fix this!
#     # option forwardfor
#     source 0.0.0.0 usesrc clientip
#     server serverhttps 127.0.0.1:443

# # Redirect HTTP to HTTPS, unless it's a LetsEncrypt request
# frontend httpfront
#     bind *:81
    
#     acl url_letsencrypt path_beg /.well-known
#     use_backend letsencrypt-backend if url_letsencrypt

#     http-request redirect scheme https unless url_letsencrypt

# Main HTTPS frontend
frontend main
    bind *:80
    bind *:443 ssl crt /etc/ssl/ha-certs/selfsigned.pem crt /etc/ssl/ha-certs/ alpn h2,http/1.1
    bind *:8443 accept-proxy ssl crt /etc/ssl/ha-certs/selfsigned.pem crt /etc/ssl/ha-certs/ alpn h2,http/1.1

    capture request header X-Forwarded-For len 15
    capture request header Host len 30

    acl url_letsencrypt path_beg /.well-known
    use_backend letsencrypt-backend if url_letsencrypt

    http-request redirect scheme https if !{ ssl_fc } !url_letsencrypt

    acl panel_url path_beg "/${PANEL_ADMIN_UUID}/"
    use_backend panel-admin-backend if panel_url
    
    acl valid_panel path_beg -f /haproxy-files/lists/valid-panel-endpoints.lst
    use_backend panel-user-backend if valid_panel

    acl valid_user path_beg -f /haproxy-files/lists/valid-user-endpoints.lst

    acl connected_ips_count_url path_end "/connected-ips-count"
    acl connected_ips_count_long_url path_end "/connected-ips-count-long"
    acl total_connected_ips_count_url path_beg "/${PANEL_ADMIN_UUID}/total-connected-ips-count"
    acl total_connected_ips_count_long_url path_beg "/${PANEL_ADMIN_UUID}/total-connected-ips-count-long"
    acl total_connected_users_count_url path_beg "/${PANEL_ADMIN_UUID}/total-connected-users-count"
    acl total_connected_users_count_long_url path_beg "/${PANEL_ADMIN_UUID}/total-connected-users-count-long"

    http-request use-service lua.connected-ips-count if connected_ips_count_url valid_user
    http-request use-service lua.connected-ips-count-long if connected_ips_count_long_url valid_user
    http-request use-service lua.total-connected-ips-count-long if total_connected_ips_count_long_url
    http-request use-service lua.total-connected-ips-count if total_connected_ips_count_url !total_connected_ips_count_long_url
    http-request use-service lua.total-connected-users-count-long if total_connected_users_count_url
    http-request use-service lua.total-connected-users-count if total_connected_users_count_url !total_connected_users_count_long_url

    http-request lua.auth-request if valid_user
    http-request deny deny_status 429 if ! { var(txn.auth_response_successful) -m bool } valid_user

    http-request replace-path ^/(.*)___(.*)$ /\1/\2

    acl uac_vless_ws path_end "${CONN_VLESS_WS_URL}"
    acl uac_vless_grpc path_sub "${CONN_VLESS_GRPC_URL}"
    acl uac_vmess_grpc path_sub "${CONN_VMESS_GRPC_URL}"
    acl uac_trojan_ws path_end "${CONN_TROJAN_WS_URL}"
    acl uac_trojan_grpc path_sub "${CONN_TROJAN_GRPC_URL}"
    acl uac_shadowsocks_v2ray path_end "${CONN_SHADOWSOCKS_V2RAY_URL}"
    acl uac_shadowsocks_grpc path_sub "${CONN_SHADOWSOCKS_GRPC_URL}"

    use_backend vless-ws if uac_vless_ws valid_user
    use_backend vless-grpc if uac_vless_grpc valid_user
    use_backend vmess-grpc if uac_vmess_grpc valid_user
    use_backend trojan-ws if uac_trojan_ws valid_user
    use_backend trojan-grpc if uac_trojan_grpc valid_user
    use_backend shadowsocks-v2ray if uac_shadowsocks_v2ray valid_user
    use_backend shadowsocks-grpc if uac_shadowsocks_grpc valid_user

    default_backend camouflaged-backend

backend letsencrypt-backend
    server letsencrypt localhost:9999

backend trojan-ws
    http-request set-path "/${CONN_TROJAN_WS_URL}"
    server trojan-ws "${CONN_TROJAN_WS_IP}:2001" ssl verify none

backend vless-ws
    http-request set-path "/${CONN_VLESS_WS_URL}"
    server vless-ws "${CONN_VLESS_WS_IP}:2002" ssl verify none

backend shadowsocks-v2ray
    http-request set-path "/${CONN_SHADOWSOCKS_V2RAY_URL}"
    server ss-v2ray "${CONN_SHADOWSOCKS_V2RAY_IP}:2003"

backend shadowsocks-grpc
    http-request set-path "/${CONN_SHADOWSOCKS_GRPC_URL}"
    server ss-grpc "${CONN_SHADOWSOCKS_GRPC_IP}:2006"

backend trojan-grpc
    http-request set-path %[path,regsub(^/[^/]*/?,/)]
    server trojan-grpc "${CONN_TROJAN_GRPC_IP}:2004" proto h2

backend vless-grpc
    http-request set-path %[path,regsub(^/[^/]*/?,/)]
    server vless-grpc "${CONN_VLESS_GRPC_IP}:2005" proto h2

backend vmess-grpc
    http-request set-path %[path,regsub(^/[^/]*/?,/)]
    server vmess-grpc "${CONN_VMESS_GRPC_IP}:2007" proto h2


backend default-backend
    # http-request return status 200 content-type "text/plain" lf-string "Hello\n"
    http-request silent-drop

backend panel-admin-backend
    acl panel_auth http_auth(adminuser)
    http-request auth unless panel_auth
    server panel 127.0.0.1:1000

backend panel-user-backend
    server panel 127.0.0.1:1000

backend camouflaged-backend
    option forwardfor
    http-request set-header Host "${CAMOUFLAGE_HOST}" if { env(CAMOUFLAGE_OVERRIDE_HOST) -m str true }
    server camouflage-https "${CAMOUFLAGE_IP}:${CAMOUFLAGE_PORT}" ssl verify none sni str("${CAMOUFLAGE_HOST}") check-sni "${CAMOUFLAGE_HOST}" check
    server camouflage-http "${CAMOUFLAGE_IP}:${CAMOUFLAGE_PORT}" backup



frontend socks-outbound
    bind 127.0.0.1:2999
    mode tcp
    log-format "%ci:%cp"
    no log
    
    default_backend socks-outbound-backend

backend socks-outbound-backend
    mode tcp
    log-format "%ci:%cp"
    no log

    server socks-out "127.0.0.1:${SOCKS_OUTBOUND_PORT}" check
    server socks-out-default "127.0.0.1:2998" backup
